using Pkg
paths = [raw"C:\Users\Asbjo\OneDrive - Syddansk Universitet\Machine\GitHubulub\StatisticalMachineLearning_drwatson", raw"C:\Users\Dennis Bal\GeekyStuff\Julia\6. Sem\Statistical Machine Learning\drwatson"]
for path in paths
    if path|>isdir
        path|>Pkg.activate
        Pkg.instantiate()
        break
    else
        continue
    end
    "Project not activated. Ensure that the repository is
    cloned locally to one of the locations in `paths`." |> error
end

using DrWatson
for file in readdir(srcdir())
    include(joinpath(srcdir(), file))
end

if "ciphers33.RData" ∈ readdir(datadir())
    ciphers = load(datadir("ciphers33.RData"))["ciphers"]
else
    download("https://nextcloud.sdu.dk/index.php/s/Zzjcqjopy5cTawn/download/data_33.Rdata", datadir("ciphers33.RData"))
    ciphers = load(datadir("ciphers33.RData"))["ciphers"]
end

using BenchmarkHistograms
pictures = Picture.(ciphers|>eachrow) |> remove_constant |> x->sort(x, by=y->y.class)
person(ID) = filter(x -> x.ID == ID, pictures)
numbersearch(pics::Vector{<:Picture}, nr) = (filter(pic -> pic.class == nr, pics))

##!======================================================!##

#?  3.2: Hierarchical clustering
##?  3.2.1 Show a low level dendrogram containing 5 instances of each digit
#?( one person ).

import StatsPlots  ##? Import does not define stuff from StatsPlots, but makes StatsPlots.plot available. Allows simultaneous use of Makie




pictures_oneperson = person(13)
pictures_oneperson_selection = [filter(p->p.class==i, pictures_oneperson)[1:8] for i in 0:9] |> x->vcat(x...)

let pics = pictures_oneperson_selection
    linkage = :ward  #* could be :single, :average, :complete, :ward
    n = length(pics)
    pic_dists = Matrix{Float64}(undef, n, n)
    for i in 1:n
        for j in 1:i
            the_dist = euclidean(pics[i], pics[j])
            pic_dists[i, j] = pic_dists[j, i] = the_dist
        end
    end
    h_cluster = hclust(pic_dists; linkage)
    plt = StatsPlots.plot(h_cluster, title="Linkage = $linkage", size=(1920÷2, 1080÷2))
    tick_labels = map_labels(pictures_oneperson_selection.class, h_cluster)
    StatsPlots.xticks!(StatsPlots.xticks(plt)[1][1], tick_labels)
    plt
end


#! Conclusion - the hierarchical clustering does get several things right, but it is not impressive.


##?  3.2.2 Use K-Means clustering to compress each digit into 5 clusters,
#?   as done in 3.1.1, and perform hierarchical clustering to show a low 
#?   level dendrogram of this (one person).

#* Splitting pictures from 1 person into 10 vectors, each for a seperate digit.
picss_batched_322 =  batch(person(13), 10, false)
picss_batched_322[2]
#* Finding 5 k-means clusters  for each
n_clusters = 3
clusters = [kmeans(picss_batched_322[i]|>datamat, n_clusters) for i in 1:10]
clusters
#* Putting the centers of the clusters into the same matrix
centers = hcat(getfield.(clusters, :centers)...)

#* Computing the hclusters, plotting the dendrogram
let
    linkage = :ward  #* could be :single, :average, :complete, :ward
    n = size(centers, 2)
    dists = Matrix{Float64}(undef, n, n)
    for i in 1:n
        for j in 1:i
            the_dist = euclidean(centers[:, i], centers[:, j])
            dists[i, j] = dists[j, i] = the_dist
        end
    end
    h_cluster_322 = hclust(dists; linkage)
    plt = StatsPlots.plot(h_cluster_322, title="Linkage = $linkage", size=(1920÷2, 1080÷2), label="", legend=true)
    tick_labels = map_labels(repeat(0:9, n_clusters) |> sort, h_cluster_322)
    StatsPlots.xticks!(h_cluster_322.order|>eachindex, tick_labels)
    # StatsPlots.hline!([+(reverse(h_cluster_322.heights)[9:10]...)/2], label="Split in 10")
    plt
end



##?  3.2.3 Discuss the results and relate them to the cross validation
#?   tables from k-NN classification.
#* It looks like the clustering is pretty poor - most numbers are not put into the sensible clusters
#* From what I can see, clustering should DRASTICALLY make performance worse, for a small n_clusters.


#? 3.3: Evaluation methods of k-NN
#ToDo As seen in the hierarchical clustering plot we often get different labels when finding the nearest neighbors of different ciphers. This indicates that we are not completely sure about our estimation. Until now, in k-NN we have simply used the one with most votes. But we can also exclude predictions which does not have enough of the same labels. In k-NN we can set the “l” to the minimum number of “k” nearest neighbors of the strongest label to accept a match.

## ToDo 3.3.1 Plot the precision-recall curves for 1 to 13 “k” with “l” 
#  @    values up to the “k” value. Here, the results should be one plot containing “k” lines, and each one have “k” datapoints.
using PrettyTables, ProgressMeter
using OffsetArrays

function confmat(tts::TrainTestSplit; kwargs...)
    preds = classify(tts; kwargs...)
    truths = testclasses(tts)
    inds_missings = findall(ismissing, preds)
    missing_counts = OffsetArray(fill(0, 10), 0:9)
    for i in inds_missings
        missing_counts[truths[i]] += 1
    end
    deleteat!(preds, inds_missings)
    deleteat!(truths, inds_missings)
    confusion_matrix = fill(0, (10, 10))
    for i in eachindex(truths)
        confusion_matrix[truths[i]+1, preds[i]+1] += 1
    end
    return confusion_matrix, missing_counts
end

function print_confmat(cm::AbstractMatrix)
    cm = Matrix{Union{String, Int}}(cm)
    cm = [cm; sum(cm, dims=1)]
    cm = [cm sum(cm, dims=2)]
    cm = [[["$i" for i in 0:9]; "Sum"] cm]
    cm = [["          Actual\nPredicted  " reshape(["$i" for i in 0:9], (1, 10)) "Sum"]; cm]
    pretty_table(cm, noheader=true, alignment=:c, body_hlines=[1, 11], linebreaks=true)
end

begin
    params = (step = 3, parts_train=1, parts_test=1)
    results_33, results_33_path = produce_or_load(datadir(), params, prefix="33", suffix="jld2") do params #* params is the 2nd argument NamedTuple, in this case (k=3,)
        pics = pictures[1:params.step:end]
        tts = TrainTestSplit(pics, params.parts_train//params.parts_test)
        ks = 1:13
        results = DataFrame(k=Int[], l=Int[], cm=Matrix[], missing_counts = OffsetArray[])
        p = Progress(91, 1)
        for k in ks
            for l in 1:k
                cm, missing_counts = confmat(tts; k, l)
                push!(results, [k, l, cm, missing_counts])
                next!(p)
            end
        end
        return @strdict results
    end
    results_33 = results_33["results"]
end
results_33_path

function accuracy(cm::AbstractMatrix)
    @assert size(cm) == (10, 10) "Expected a 10x10 confusion matric"
    sum(cm[i, i] for i in 1:10) / sum(cm, dims=(1, 2))[1]
end

using AlgebraOfGraphics
begin
    axis = (width=400, height=400)
    plt = visual(Scatter, colormap=:thermal) * AlgebraOfGraphics.data(results_33) * mapping(:k, :cm=>accuracy=>"Accuracy")
    plt *= mapping(color = :l => "Threshold l")
    draw(plt; axis)
    current_axis().xticks = 1:13
    current_axis().title = "$(66000÷params.step), $(params.parts_train)/$(params.parts_test) split"
    current_figure()
end
begin #? Same plot as above with proportion of classifications made on colorbar
    axis = (width=400, height=400)
    plt = visual(Scatter, colormap=:thermal) * AlgebraOfGraphics.data(results_33) * mapping(:k, :cm=>accuracy=>"Accuracy")
    plt *= mapping(color = :l => "Threshold l")
    draw(plt; axis)
    current_axis().xticks = 1:13
    current_axis().title = "$(66000÷params.step), $(params.parts_train)/$(params.parts_test) split"
    current_figure()
end
scatter(results_33.missing_counts .|> sum, results_33.cm .|> accuracy,
axis=(xlabel="Missing count", ylabel="Accuracy", title = "$(66000÷params.step), $(params.parts_train)/$(params.parts_test) split"))
begin
    axis = (width=400, height=400)
    plt = visual(Scatter, colormap=:thermal) * AlgebraOfGraphics.data(results_33) * mapping(:k, :l=>"Threshold l")
    plt *= mapping(color = :cm => accuracy => "Accuracy")
    draw(plt; axis)
    current_axis().xticks = 1:13
    current_axis().yticks = 1:13
    current_axis().title = "$(66000÷params.step), $(params.parts_train)/$(params.parts_test) split"
    current_figure()
end

begin
    axis = (width=400, height=400)
    plt = visual(Heatmap, colormap=:thermal) * AlgebraOfGraphics.data(results_33) * mapping(:k, :l=>"Threshold l", :cm=>accuracy=>"Accuracy")
    draw(plt; axis)
    current_axis().xticks = 1:13
    current_axis().yticks = 1:13
    current_axis().title = "$(66000÷params.step), $(params.parts_train)/$(params.parts_test) split"
    current_figure()
end

##? Ignoring missings leads to following definition of prec and recall
import Base: precision
function precision(cm::Matrix)
    @assert size(cm) == (10, 10) "Expected a 10x10 matrix"
    [cm[i, i]/sum(cm[j, i] for j in 1:10) for i in 1:10]
end

function recall(cm::Matrix)
    @assert size(cm) == (10, 10) "Expected a 10x10 matrix"
    [cm[i, i]/sum(cm[i, j] for j in 1:10) for i in 1:10]
end

precision(results_33.cm[1])
recall(results_33.cm[1])

###! Below is the old code that gave a straigt line.
##
function CMs(tts; k, l = 1, tiebreaker = rand, tree = BruteTree,  metric = Euclidean())
    inds = knn_threaded(tts.train, tts.test; k, tree, metric)
	preds = classify(inds, trainclasses(tts); tiebreaker, l)
    truths = testclasses(tts)
    inds_missings = findall(ismissing, preds)
    n_missings  = length(inds_missings)
    preds_filtered = deleteat!(copy(preds), inds_missings) .|> identity
    truths_filtered = deleteat!(copy(truths), inds_missings)
    return [(; k, l, positive_label=i, n_missings, cm=ConfusionMatrix(OneVsRest(i, deleteat!(0:9|>Vector, i+1)), truths_filtered, preds_filtered)) for i in 0:9]
end

function CMs_summed(tts; kwargs...)
    cms = CMs(tts; kwargs...)
    summed_cm = sum(getfield.(cms, :cm))
    n_missings_summed = sum(getfield.(cms, :n_missings))
    return (;k=cms[1].k, l=cms[1].l, n_missings=n_missings_summed, summed_cm)
end

#=
@time begin
    cms = []
    ks = 1:13
    t₀ = time()
    for k in ks
        for l in 1:k
            "k=$k, l=$l. Time elapsed: $(round(time() - t₀), digits=1) seconds" |> println
            push!(cms, CMs_summed(tts_33; k, l))
        end
    end
    cms
end
=#
# save(datadir("cms_alldata_TTSRatio_99_1.jld2"), Dict("cms"=>cms, ))
cms = load(datadir("cms_alldata_TTSRatio_99_1.jld2"))["cms"]

##

begin
    results = DataFrame(k = [], l = [], prec = [], rec = [], n_missings = [], f1 = [])
    for cm in cms
        push!(results, [cm.k, cm.l .|> string, cm.summed_cm|>precision, cm.summed_cm|>recall, cm.n_missings, cm.summed_cm|>f1_score])
    end
    results .|> identity
end
cms
getfield.(cms, :summed_cm)
begin  #? Plotting setup
    using AlgebraOfGraphics
    set_aog_theme!()
    update_theme!(markersize=15, fontsize=30)
    using GLMakie
end

begin #? plotting
    axis = (width=900, height=800)
    plt = AlgebraOfGraphics.data(results) * mapping(:prec=>"Precision", :rec=>"Recall")
    plt *= mapping(color=:k)
    plt *= mapping(marker=:l=>sorter(Vector(1:13) .|> string))

    draw(plt; axis, colorbar=(colormap=:thermal, ))
end

#ToDo 3.3.2 Plot the maximum F1 values for each of the k in a plot together. With F1 score on the y- axis and “k”-value on the x-axis.
begin
    new_results = results|>copy
    sort!(new_results, :f1)
    bad_inds = Int64[]
    represented_ks = Int64[]
    for i in axes(new_results, 1)
        if new_results[i, :k] ∈ represented_ks
            push!(bad_inds, i)
        else
            push!(represented_ks, new_results[i, :k])
        end
    end
    new_results = new_results[axes(new_results, 1) .∉ [bad_inds], :] .|> identity
    begin #? plotting
        axis = (width=900, height=800)
        plt = AlgebraOfGraphics.data(new_results) * mapping(:k=>"k", :f1=>"Maximal F1 score")
        plt *= mapping(color=:l=>sorter(Vector(1:13) .|> string))
    
        draw(plt; axis)
    end
    current_axis().xticks = 1:13
    current_figure()
end

#ToDo 3.3.3 Discuss the results from 3.3.1 and 3.3.2. What do you think would be the most important part of a digit recognition system. Precision or recall? Please discuss in what situations would the different factors be more important?


#? 3.1: K-means clustering
#ToDo 3.1.1 Try to improve the performance on 2-person (disjunct) dataset (you can select any 2 person data for this) using K-means clustering. Perform K- means clustering of each cipher individually for the training set, in order to represent the training data as a number of cluster centroids. Now perform the training of the k-NN using the centroids of these clusters. You can try with different cluster sizes and see the resulting performance.

#ToDo 3.1.2 Compare your KNN performance based on the raw training data and based on the cluster centroids of the training data. During the comparison you should also consider the run times of the algorithm. As the generation of clusters is based on random starting points cross-validation should be performed.

#ToDo 3.1.3 Perform K-means clustering on each cipher individually for the training data from all the available datasets (disjunct). Represent the training data as a number of cluster centroids and compare performance, try multiple cluster sizes.

tester = Matrix{Union{Int, Vector, Matrix, String}}(undef, 0, 4)
tester = vcat(tester,)
[["k" "l" "cm" "missing_counts"]
[1  1   [2905 15 20 26 37 27 144 27 32 33; 1 3246 17 2 5 0 6 27 7 32; 45 82 2818 82 30 14 29 130 57 25; 57 130 66 2590 9 116 28 91 101 97; 33 134 11 0 2754 2 26 37 3 333; 67 81 23 90 34 2650 207 34 80 57; 180 79 16 10 16 83 2822 6 79 8; 8 77 46 26 5 8 12 3083 12 35; 61 61 83 181 11 117 252 33 2419 74; 33 149 24 45 346 30 9 75 29 2495]        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
[2  1   [2802 23 27 28 40 28 175 38 48 57; 3 3225 18 4 9 1 7 28 8 40; 57 83 2738 85 34 30 31 138 85 31; 72 153 79 2441 10 137 36 125 129 103; 33 165 12 2 2649 7 31 33 7 394; 62 94 34 134 46 2511 240 39 102 61; 196 97 21 16 19 96 2734 6 101 13; 7 95 55 26 8 13 15 3036 17 40; 66 77 92 172 8 153 277 44 2292 111; 38 166 29 34 402 32 12 100 41 2381]      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
[2  2   [2604 9 5 3 10 4 51 9 7 12; 0 3164 6 0 1 0 2 17 2 12; 14 46 2458 10 6 2 8 39 9 6; 18 77 16 2100 3 32 6 37 20 26; 9 77 5 0 2301 0 9 13 1 109; 17 44 6 30 9 2182 65 11 15 10; 75 51 4 0 2 18 2446 1 19 5; 4 44 16 4 0 0 4 2886 0 9; 20 34 32 41 0 19 83 7 1853 14; 5 81 1 13 133 9 0 34 4 1959]       [552, 139, 714, 950, 809, 934, 678, 345, 1189, 996]]
[3  1   [2865 27 18 29 33 30 146 39 30 49; 2 3245 16 2 7 0 10 29 4 28; 52 101 2820 62 27 20 30 118 58 24; 64 176 72 2518 15 110 42 115 82 91; 32 177 19 0 2719 7 36 40 7 296; 63 110 29 101 49 2600 193 42 88 48; 178 89 13 11 12 73 2819 4 84 16; 7 97 40 15 5 7 15 3074 21 31; 58 80 84 155 14 107 269 49 2386 90; 36 186 17 40 329 22 6 99 43 2457]      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
[3  2   [2834 21 11 16 17 10 130 23 15 34; 0 3233 14 0 2 0 6 26 2 24; 37 81 2749 40 14 9 16 91 36 12; 43 150 43 2429 8 77 16 78 54 58; 18 159 14 0 2691 3 24 26 2 266; 39 86 14 65 29 2517 142 24 53 28; 154 79 7 2 6 51 2769 2 55 10; 4 86 32 10 0 6 10 3043 9 22; 36 66 53 107 2 57 199 29 2282 49; 15 162 7 25 295 16 2 80 16 2398]      [155, 36, 227, 329, 130, 326, 164, 90, 412, 219]]
[3  3   [2344 4 1 0 2 2 26 3 4 5; 0 3069 5 0 1 0 1 14 1 7; 7 29 2191 4 3 0 2 23 4 4; 11 57 8 1714 1 14 2 21 9 14; 7 63 1 0 1908 0 6 6 0 53; 8 33 3 7 5 1799 28 4 2 4; 46 39 0 0 1 2 2123 0 9 1; 3 29 5 1 0 0 0 2672 0 5; 9 26 15 19 0 2 40 0 1486 4; 1 57 0 8 70 3 0 18 2 1546]     [875, 245, 1045, 1434, 1289, 1430, 1078, 597, 1691, 1530]]
[4  1   [2882 29 25 23 30 18 157 30 28 44; 1 3241 19 0 2 0 10 30 5 35; 48 114 2799 56 25 21 25 137 64 23; 50 195 68 2511 16 111 33 123 80 98; 27 184 16 1 2700 7 37 38 9 314; 75 122 31 89 40 2633 172 33 75 53; 172 105 19 7 10 70 2817 4 82 13; 10 114 41 16 7 9 14 3064 17 20; 57 85 80 144 15 93 267 35 2427 89; 31 212 14 43 330 27 10 98 30 2440]     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
[4  2   [2861 25 18 17 28 17 156 28 24 39; 0 3239 22 0 3 0 10 25 7 30; 44 107 2780 54 23 19 23 125 63 18; 48 184 57 2489 8 98 25 117 74 83; 22 184 13 1 2687 6 30 35 6 317; 58 120 23 83 31 2588 161 27 70 43; 183 100 12 4 10 64 2786 6 78 12; 7 106 44 12 5 8 14 3050 15 32; 46 78 69 134 8 83 249 31 2398 84; 26 197 9 36 335 22 6 93 21 2429]       [53, 7, 56, 102, 32, 119, 44, 19, 112, 61]]
[4  3   [2644 12 5 7 8 3 72 9 4 14; 0 3170 9 0 1 0 2 18 1 13; 17 59 2518 10 8 1 5 47 14 6; 19 119 21 2112 1 44 7 46 25 23; 11 118 4 0 2416 0 12 15 1 135; 19 71 8 22 11 2225 61 14 12 14; 87 57 2 0 1 18 2524 0 28 3; 4 67 13 3 0 0 3 2903 5 8; 20 50 27 46 0 19 109 8 1925 25; 5 128 1 12 162 7 0 47 5 2046]       [488, 129, 627, 868, 621, 866, 579, 306, 1063, 822]]
[4  4   [2116 3 0 0 0 1 14 1 1 2; 0 2980 4 0 0 0 1 9 1 6; 4 23 1939 2 0 0 0 13 1 2; 8 48 3 1433 0 6 1 8 3 8; 3 47 1 0 1603 0 2 3 0 24; 2 27 2 4 4 1497 15 2 1 1; 28 29 0 0 1 0 1860 0 4 1; 3 25 1 1 0 0 0 2494 0 3; 7 21 12 6 0 0 29 0 1199 2; 1 38 0 3 36 0 0 12 1 1200]       [1128, 342, 1328, 1767, 1650, 1768, 1376, 785, 2016, 1944]]
[5  1   [2881 33 21 22 30 20 147 34 27 51; 1 3239 21 0 2 0 13 31 3 33; 56 123 2782 58 26 19 23 140 57 28; 52 217 71 2508 13 106 26 120 81 91; 26 207 18 1 2684 8 35 42 10 302; 66 143 30 94 35 2623 177 33 71 51; 171 99 15 7 12 55 2836 7 83 14; 7 118 45 14 7 9 16 3053 18 25; 52 89 65 129 14 90 268 41 2455 89; 29 215 14 43 316 30 9 109 25 2445]      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
[5  2   [2881 33 17 21 30 16 151 29 25 51; 0 3234 21 0 5 0 11 30 4 36; 53 120 2789 50 21 19 24 141 57 25; 52 214 68 2493 14 112 22 122 75 83; 27 206 14 1 2691 2 29 41 9 303; 69 142 28 87 35 2617 165 31 67 45; 157 109 14 6 10 48 2848 6 76 16; 8 116 42 13 6 8 14 3058 16 24; 46 85 67 138 12 92 272 37 2435 85; 26 220 12 40 317 26 8 108 22 2439]      [12, 2, 13, 30, 10, 37, 9, 7, 23, 17]]
[5  3   [2780 23 12 10 14 5 115 19 9 26; 0 3210 18 0 2 0 8 26 3 28; 26 83 2657 18 11 4 9 87 28 10; 30 171 38 2292 4 66 10 74 45 39; 19 166 7 0 2605 0 19 27 3 247; 35 97 13 43 18 2448 104 15 25 19; 133 76 6 1 5 32 2728 3 51 6; 5 96 24 6 2 2 4 2994 7 15; 27 72 35 73 1 39 169 19 2184 47; 15 188 2 23 270 11 3 72 5 2317]       [253, 48, 379, 516, 240, 506, 258, 157, 626, 329]]
[5  4   [2457 7 2 1 3 1 31 5 1 8; 0 3096 8 0 1 0 2 14 1 8; 9 43 2298 3 2 0 2 29 5 4; 11 100 13 1844 1 24 5 26 10 13; 7 107 1 0 2137 0 9 7 0 74; 5 64 7 14 8 1924 37 8 3 8; 60 46 1 0 1 7 2309 0 17 2; 3 52 4 1 0 0 1 2779 1 6; 13 35 17 21 0 7 63 2 1632 9; 4 96 0 5 97 4 0 34 1 1720]      [750, 213, 917, 1238, 991, 1245, 856, 465, 1493, 1274]]
[5  5   [1942 2 0 0 0 0 10 0 1 2; 0 2911 3 0 0 0 1 7 1 2; 3 19 1731 2 0 0 0 11 0 2; 4 38 1 1214 0 5 0 4 1 7; 2 38 0 0 1324 0 1 2 0 11; 1 21 0 2 1 1224 5 2 0 0; 23 25 0 0 0 0 1626 0 2 0; 3 18 0 1 0 0 0 2348 0 1; 2 16 7 3 0 0 19 0 996 1; 1 28 0 3 27 0 0 9 0 957]        [1309, 418, 1544, 2011, 1955, 2067, 1623, 941, 2248, 2210]]
[6  1   [2868 33 26 22 28 20 159 35 27 48; 0 3228 21 0 6 0 12 31 5 40; 57 129 2780 47 23 15 28 148 57 28; 55 231 67 2489 14 112 25 129 79 84; 28 211 20 1 2681 3 35 42 7 305; 66 158 34 76 32 2644 162 37 58 56; 182 111 13 7 12 54 2819 8 75 18; 9 129 43 13 7 6 13 3046 19 27; 56 95 69 120 13 97 270 39 2437 96; 27 246 13 40 324 28 9 100 30 2418]      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
[6  2   [2870 31 24 22 30 18 154 36 28 50; 0 3219 23 0 5 0 13 34 4 44; 58 130 2774 49 25 16 29 145 56 28; 57 236 67 2484 14 105 21 129 82 82; 26 207 14 1 2668 5 39 44 9 318; 69 155 27 83 32 2621 163 41 60 60; 170 110 14 7 10 55 2830 6 77 16; 8 121 47 10 6 6 14 3052 16 31; 57 99 64 122 13 93 272 39 2447 83; 30 239 11 44 338 28 9 102 21 2408]      [3, 1, 2, 8, 2, 12, 4, 1, 3, 5]]
[6  3   [2823 26 15 15 16 12 132 26 14 40; 0 3222 18 0 4 0 12 27 4 36; 39 106 2716 22 16 9 14 115 41 17; 40 207 50 2379 4 87 13 101 60 49; 22 191 8 0 2639 1 27 32 5 286; 50 128 17 52 22 2528 123 23 37 34; 165 97 8 1 7 46 2770 7 60 10; 7 115 32 6 5 4 5 3021 11 19; 40 86 47 98 6 59 220 26 2334 62; 23 221 4 26 322 23 6 84 12 2345]       [147, 20, 217, 295, 122, 309, 128, 87, 314, 169]]
[6  4   [2622 15 8 5 8 1 56 10 4 17; 0 3149 13 0 1 0 6 19 1 18; 16 61 2476 8 6 1 3 54 11 7; 17 147 19 2038 1 46 6 49 23 19; 15 148 3 0 2381 0 11 14 1 139; 16 80 9 22 12 2192 67 11 8 12; 86 63 5 0 2 13 2535 0 27 4; 3 74 12 2 0 0 3 2886 5 10; 18 50 27 34 0 10 104 11 1908 21; 6 152 0 10 170 7 3 55 1 1998]     [520, 136, 669, 920, 621, 894, 564, 317, 1109, 833]]
[6  5   [2296 3 1 0 1 0 19 3 1 4; 0 3036 7 0 1 0 2 10 1 6; 6 33 2096 2 1 0 1 17 1 3; 7 78 5 1609 0 15 1 15 3 9; 5 84 1 0 1869 0 7 5 0 49; 2 53 2 8 2 1673 19 2 2 5; 44 40 0 0 1 2 2108 0 7 0; 3 38 1 1 0 0 1 2661 1 3; 9 28 12 12 0 2 46 1 1390 5; 3 74 0 3 61 2 0 28 0 1432]       [938, 280, 1152, 1543, 1313, 1555, 1097, 603, 1787, 1632]]
[6  6   [1773 2 0 0 0 0 7 0 0 0; 0 2837 2 0 0 0 1 6 0 1; 3 13 1548 0 0 0 0 7 0 1; 4 30 0 1034 0 1 0 4 1 4; 1 33 0 0 1120 0 0 2 0 6; 0 17 0 1 1 1016 2 1 0 0; 17 22 0 0 0 0 1439 0 0 0; 3 15 0 1 0 0 0 2201 0 1; 0 15 5 1 0 0 11 0 821 1; 1 21 0 3 17 0 0 8 0 767]       [1484, 496, 1740, 2207, 2171, 2285, 1821, 1091, 2438, 2418]]
[7  1   [2869 42 29 21 25 18 142 37 26 57; 1 3225 22 1 6 0 17 30 2 39; 51 138 2768 39 27 17 33 149 60 30; 59 253 73 2459 14 110 25 133 73 86; 28 230 15 1 2661 6 40 39 8 305; 66 159 32 90 35 2613 166 42 58 62; 174 111 12 4 15 48 2835 9 76 15; 6 133 43 11 6 4 14 3049 18 28; 51 100 65 127 11 79 269 40 2457 93; 36 260 9 35 309 29 8 115 22 2412]      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
[7  2   [2874 36 28 22 30 16 140 32 29 59; 1 3225 22 1 5 0 15 33 4 37; 52 140 2769 43 28 14 30 150 53 33; 55 256 73 2452 15 110 28 132 77 86; 30 232 16 1 2655 5 40 46 7 301; 68 159 31 85 45 2613 165 41 55 60; 181 117 11 3 11 44 2833 9 74 16; 7 131 45 11 5 4 16 3050 17 26; 51 94 63 129 13 85 271 38 2452 96; 33 249 15 39 317 27 9 104 20 2422]      [0, 0, 0, 1, 0, 1, 0, 0, 0, 0]]
[7  3   [2853 38 19 18 19 14 128 30 21 53; 2 3214 23 0 6 0 12 33 3 39; 43 128 2734 34 21 13 20 134 47 25; 48 237 57 2415 6 95 17 115 72 56; 27 216 11 1 2654 3 33 36 5 291; 56 147 23 68 27 2565 143 25 42 48; 167 106 9 1 8 46 2810 9 61 11; 7 121 39 7 6 3 11 3042 13 21; 45 93 52 114 6 65 254 30 2399 74; 27 246 7 31 299 24 6 102 16 2391]     [73, 11, 113, 167, 56, 179, 71, 42, 160, 86]]
[7  4   [2738 24 10 11 11 4 89 15 7 32; 0 3188 18 0 3 0 9 22 1 29; 24 95 2578 12 8 2 9 78 20 9; 27 190 35 2186 1 62 9 71 38 28; 19 172 6 0 2536 0 22 18 2 224; 30 106 11 42 17 2338 94 15 16 18; 118 86 5 1 3 23 2659 1 38 6; 4 98 20 2 1 0 3 2952 6 12; 28 67 34 53 3 27 156 14 2137 33; 12 199 2 15 256 11 4 71 3 2241]       [325, 73, 477, 638, 334, 636, 359, 214, 740, 421]]
[7  5   [2473 11 3 1 4 0 35 4 1 9; 0 3102 12 0 1 0 4 16 1 14; 9 46 2298 2 3 1 2 36 3 4; 9 124 6 1845 1 29 5 31 8 13; 9 127 2 0 2160 0 9 8 1 101; 9 71 3 13 7 1944 41 5 4 8; 61 49 4 0 2 8 2353 0 13 3; 3 58 4 1 0 0 3 2793 1 6; 14 40 21 20 0 5 72 5 1693 13; 3 124 0 6 104 5 1 42 0 1754]      [725, 193, 908, 1214, 916, 1218, 806, 443, 1409, 1196]]
[7  6   [2147 3 0 0 1 0 12 1 1 2; 0 2982 5 0 0 0 2 10 1 5; 5 29 1949 1 0 0 0 13 0 2; 5 71 0 1404 0 10 0 10 2 6; 3 73 0 0 1627 0 5 4 0 34; 0 41 2 5 1 1451 10 1 1 3; 35 37 0 0 0 1 1933 0 4 0; 3 34 0 1 0 0 1 2548 1 1; 6 26 7 5 0 0 33 0 1203 3; 2 63 0 3 38 0 0 19 0 1216]     [1099, 338, 1313, 1777, 1587, 1808, 1289, 723, 2009, 1894]]
[7  7   [1628 1 0 0 0 0 3 0 0 0; 0 2785 2 0 0 0 1 5 0 0; 3 12 1391 0 0 0 0 4 0 0; 3 25 0 882 0 1 0 4 0 3; 1 30 0 0 947 0 0 2 0 4; 0 16 0 1 1 872 2 1 0 0; 15 21 0 0 0 0 1269 0 0 0; 2 10 0 1 0 0 0 2056 0 1; 0 14 2 1 0 0 9 0 713 1; 1 16 0 1 16 0 0 3 0 633]       [1634, 550, 1902, 2367, 2349, 2430, 1994, 1242, 2552, 2565]]
[8  1   [2879 42 31 18 29 11 140 33 29 54; 1 3217 22 2 5 0 16 37 3 40; 48 151 2757 36 25 17 33 153 63 29; 58 276 65 2426 14 112 21 144 79 90; 33 241 14 2 2633 3 41 45 7 314; 69 168 33 85 34 2598 182 31 58 65; 170 130 16 2 12 57 2818 8 73 13; 7 136 48 7 5 5 13 3038 22 31; 55 109 70 129 7 82 261 37 2453 89; 28 261 14 40 313 29 11 113 18 2408]      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
[8  2   [2866 42 31 22 24 13 144 37 31 56; 1 3218 22 1 5 0 16 37 4 39; 54 148 2767 38 25 14 31 146 57 32; 56 271 73 2432 17 115 24 131 78 88; 32 243 12 2 2634 3 39 44 9 315; 72 178 30 79 39 2592 176 39 60 58; 173 120 13 4 11 55 2827 8 72 16; 7 135 48 8 6 5 15 3032 23 33; 50 105 70 123 12 89 270 40 2447 86; 26 256 15 39 318 28 8 125 21 2399]      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
[8  3   [2862 40 26 17 21 12 138 33 22 56; 2 3220 23 0 7 0 15 35 4 35; 44 133 2761 34 22 12 26 138 52 29; 51 266 60 2407 8 106 21 126 71 75; 32 236 10 1 2615 3 36 40 6 318; 65 164 26 73 36 2559 161 30 51 61; 176 122 12 2 8 46 2804 10 67 12; 7 134 40 8 4 3 13 3030 17 29; 50 103 60 115 6 75 259 32 2435 81; 29 265 11 31 308 25 7 107 15 2390]        [39, 2, 61, 94, 36, 97, 40, 27, 76, 47]]
[8  4   [2774 33 12 13 14 6 115 19 10 42; 1 3195 21 0 4 0 12 29 1 36; 31 114 2627 15 16 5 13 102 30 17; 33 220 43 2284 3 78 11 83 44 43; 25 204 7 1 2553 0 25 26 2 270; 41 136 16 56 22 2415 115 18 26 27; 141 104 7 1 5 28 2720 2 51 7; 4 112 27 3 2 2 5 2982 12 17; 39 83 40 75 3 40 187 17 2254 51; 17 233 4 19 294 15 5 85 3 2288]      [228, 44, 342, 443, 220, 451, 233, 146, 503, 272]]
[8  5   [2600 18 6 3 5 2 54 9 4 14; 0 3146 16 0 1 0 6 18 1 23; 16 78 2411 4 7 2 6 60 9 5; 16 154 10 1988 1 40 7 50 16 18; 13 157 3 0 2341 0 17 11 1 148; 21 89 6 21 12 2126 54 11 9 11; 91 67 5 0 2 12 2513 0 21 4; 3 79 11 1 0 0 3 2859 4 8; 22 52 28 30 2 11 110 10 1916 22; 7 168 0 9 169 7 2 54 1 1989]     [551, 132, 714, 985, 642, 963, 584, 344, 1089, 829]]
[8  6   [2340 7 1 0 3 0 25 3 1 3; 0 3055 8 0 0 0 3 13 1 10; 6 41 2160 2 1 0 1 24 0 2; 8 108 3 1651 1 22 3 23 4 7; 6 113 1 0 1948 0 7 6 1 68; 2 59 3 9 4 1733 21 4 1 6; 52 42 3 0 1 3 2178 0 10 0; 3 55 2 1 0 0 1 2682 1 4; 10 35 11 11 0 0 55 2 1504 9; 3 106 0 4 71 3 0 28 0 1523]     [883, 253, 1075, 1455, 1183, 1481, 1010, 563, 1655, 1497]]
[8  7   [2011 2 0 0 0 0 6 1 0 0; 0 2937 5 0 0 0 1 8 0 5; 3 25 1797 1 0 0 0 9 0 1; 4 63 0 1250 0 4 0 9 2 4; 3 62 0 0 1452 0 3 3 0 19; 0 36 2 1 1 1278 8 1 0 1; 31 35 0 0 0 0 1765 0 2 0; 3 26 0 1 0 0 0 2423 1 1; 3 22 6 2 0 0 24 0 1041 3; 2 54 0 1 29 0 0 12 0 1044]       [1246, 387, 1476, 1949, 1791, 1995, 1466, 857, 2191, 2093]]
[8  8   [1483 1 0 0 0 0 1 0 0 0; 0 2725 2 0 0 0 1 3 0 0; 3 12 1273 0 0 0 0 4 0 0; 2 20 0 771 0 1 0 3 0 1; 1 24 0 0 796 0 0 2 0 3; 0 14 0 0 1 733 2 1 0 0; 13 20 0 0 0 0 1107 0 0 0; 2 10 0 0 0 0 0 1922 0 0; 0 10 2 1 0 0 7 0 611 1; 1 14 0 0 9 0 0 2 0 528]        [1781, 612, 2020, 2487, 2507, 2572, 2159, 1378, 2660, 2681]]
[9  1   [2875 45 27 19 24 12 137 36 31 60; 1 3214 23 1 9 0 15 38 4 38; 49 156 2749 40 30 17 36 150 56 29; 59 282 68 2416 17 111 27 137 73 95; 34 250 16 1 2613 3 44 45 9 318; 76 189 31 72 41 2584 172 36 57 65; 179 123 13 3 11 52 2814 7 83 14; 8 140 45 5 4 4 17 3032 25 32; 57 107 69 126 10 76 274 38 2451 84; 28 282 15 35 322 26 10 108 23 2386]     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
[9  2   [2857 47 27 21 24 11 141 39 35 64; 2 3210 24 0 8 0 15 36 4 44; 51 156 2760 39 29 16 34 146 50 31; 60 284 70 2434 20 106 25 134 65 87; 37 261 16 2 2617 2 43 41 6 308; 73 186 33 83 43 2581 175 37 54 58; 177 126 17 5 10 51 2810 9 82 12; 8 139 44 9 4 4 15 3041 19 29; 60 108 64 116 12 72 271 37 2463 89; 25 275 14 32 317 26 8 111 22 2405]      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
[9  3   [2864 44 24 18 22 10 142 32 30 64; 2 3208 23 0 8 0 15 36 4 46; 50 158 2738 38 26 16 32 145 54 30; 55 277 66 2418 12 107 25 134 68 84; 36 245 12 2 2609 1 39 45 7 318; 76 186 25 76 36 2559 169 33 50 59; 174 121 12 4 11 45 2814 8 79 13; 7 137 41 8 3 5 14 3038 18 26; 52 102 63 120 10 75 276 32 2439 89; 26 279 14 34 317 26 8 110 19 2387]      [16, 1, 25, 39, 19, 54, 18, 15, 34, 15]]
[9  4   [2810 38 12 14 16 8 114 26 22 49; 1 3204 23 0 7 0 12 32 1 38; 35 130 2667 21 21 8 14 115 38 20; 41 246 49 2335 3 86 16 97 52 56; 29 229 9 1 2567 0 32 31 3 294; 51 153 19 59 28 2481 139 17 36 33; 150 108 9 1 5 37 2758 5 62 9; 5 122 32 3 2 2 8 3000 14 24; 45 87 50 92 3 50 223 22 2336 63; 19 266 6 21 294 19 5 96 11 2322]     [157, 25, 243, 304, 138, 307, 155, 100, 321, 176]]
[9  5   [2675 25 8 4 8 2 84 16 8 26; 0 3166 18 0 3 0 10 26 1 28; 19 102 2509 8 9 4 10 78 17 9; 22 192 25 2116 1 55 7 61 26 25; 20 188 6 0 2447 0 20 15 1 219; 28 104 9 28 12 2252 84 12 15 15; 123 90 6 0 2 22 2600 2 37 6; 4 101 17 1 0 2 3 2910 5 11; 28 70 35 41 2 16 146 14 2095 29; 10 207 0 11 246 11 3 71 3 2150]        [410, 91, 547, 755, 417, 764, 411, 258, 816, 523]]
[9  6   [2479 13 2 2 5 0 39 5 2 7; 0 3099 14 0 0 0 4 15 1 18; 12 66 2283 4 5 2 2 38 2 4; 13 142 7 1810 1 29 5 32 8 12; 9 145 1 0 2162 0 13 7 1 99; 10 79 3 11 5 1952 34 9 3 9; 69 55 4 0 2 6 2350 0 15 3; 3 72 7 1 0 0 1 2780 3 6; 14 44 20 16 0 5 83 5 1692 12; 6 145 0 7 117 5 2 44 0 1760]       [712, 192, 894, 1226, 896, 1208, 795, 439, 1401, 1149]]
[9  7   [2218 4 0 0 2 0 21 3 1 0; 0 3008 8 0 0 0 2 10 0 9; 3 37 2017 2 0 0 1 17 0 2; 5 96 1 1474 1 9 1 17 3 5; 5 98 1 0 1757 0 4 4 0 49; 1 55 2 4 4 1544 16 2 1 3; 47 39 3 0 1 2 2029 0 5 0; 3 43 0 1 0 0 0 2593 1 3; 4 29 7 6 0 0 43 1 1339 8; 3 94 0 2 53 0 0 18 0 1341]      [1017, 306, 1233, 1673, 1415, 1691, 1173, 668, 1855, 1724]]
[9  8   [1899 2 0 0 0 0 6 0 0 0; 0 2893 2 0 0 0 1 6 0 5; 3 24 1653 0 0 0 0 8 0 0; 4 54 0 1111 0 1 0 7 1 2; 2 56 0 0 1282 0 2 2 0 15; 0 29 1 1 1 1099 8 1 0 0; 27 31 0 0 0 0 1615 0 1 0; 3 24 0 1 0 0 0 2305 1 0; 1 18 3 1 0 0 19 0 922 3; 2 47 0 1 23 0 0 12 0 867]     [1359, 436, 1624, 2105, 1974, 2183, 1625, 978, 2325, 2283]]
[9  9   [1350 1 0 0 0 0 1 0 0 0; 0 2676 1 0 0 0 1 3 0 0; 2 11 1152 0 0 0 0 2 0 0; 1 19 0 685 0 0 0 3 0 1; 1 20 0 0 657 0 0 1 0 3; 0 14 0 0 1 599 1 0 0 0; 9 17 0 0 0 0 990 0 0 0; 2 8 0 0 0 0 0 1816 0 0; 0 9 1 0 0 0 3 0 527 1; 1 13 0 0 6 0 0 2 0 435]        [1914, 662, 2145, 2576, 2651, 2708, 2283, 1486, 2751, 2778]]
[10 1   [2865 44 28 21 23 14 143 38 27 63; 1 3199 26 1 8 0 17 42 4 45; 50 170 2736 33 28 18 29 154 64 30; 54 294 66 2411 16 107 27 146 72 92; 31 268 19 2 2584 3 47 45 8 326; 77 199 30 86 44 2560 180 42 48 57; 162 123 19 3 13 49 2831 8 78 13; 5 143 48 8 4 5 17 3026 21 35; 59 113 70 118 11 76 266 34 2448 97; 35 289 15 34 312 26 10 118 25 2371]     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
[10 2   [2862 44 27 20 24 13 151 32 29 64; 1 3201 27 0 7 0 19 43 2 43; 53 168 2727 39 30 18 33 151 65 28; 53 289 66 2416 15 111 27 150 71 87; 35 266 17 2 2596 4 48 43 9 313; 73 192 26 87 46 2567 185 39 51 57; 167 136 17 4 10 48 2810 8 83 16; 6 143 48 5 4 4 19 3029 19 35; 61 112 67 123 11 74 267 32 2448 97; 35 290 13 32 317 29 11 119 20 2369]     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
[10 3   [2860 43 27 18 18 14 148 32 31 65; 1 3201 25 1 8 0 19 42 2 44; 47 165 2732 32 28 17 32 154 66 26; 53 293 66 2414 15 109 24 137 72 85; 34 259 17 1 2591 4 50 47 5 316; 62 186 26 82 44 2574 178 41 48 54; 162 127 14 3 10 49 2825 8 80 14; 6 140 44 5 4 4 17 3033 19 31; 59 113 66 118 11 72 274 35 2439 91; 34 294 14 30 305 25 10 117 21 2374]     [10, 0, 13, 17, 9, 28, 7, 9, 14, 11]]
[10 4   [2818 42 14 17 16 9 137 28 24 55; 1 3198 25 0 8 0 17 38 1 42; 42 152 2687 26 21 11 17 131 46 25; 42 262 53 2362 4 91 18 119 62 61; 30 247 8 1 2576 2 36 34 4 302; 54 171 19 69 30 2507 159 25 37 44; 150 122 11 1 5 49 2779 5 70 13; 4 134 39 3 2 2 10 3004 14 29; 50 101 56 97 5 60 245 28 2384 74; 24 291 8 25 299 24 7 105 13 2322]      [106, 13, 154, 211, 93, 208, 94, 71, 192, 117]]
[10 5   [2717 30 9 10 10 2 107 19 14 34; 1 3166 22 0 2 0 13 30 1 40; 24 121 2563 11 14 4 12 96 30 13; 27 225 32 2194 2 71 11 80 35 32; 21 221 6 0 2483 0 26 20 1 259; 35 129 13 41 22 2347 114 14 19 20; 138 99 6 1 4 33 2676 4 51 7; 4 112 26 3 0 3 5 2942 10 17; 34 77 38 61 2 24 177 14 2182 41; 15 248 2 15 269 13 4 86 5 2227]     [314, 68, 424, 576, 296, 569, 280, 190, 642, 351]]
[10 6   [2566 23 3 2 7 0 59 10 5 16; 0 3129 15 0 1 0 8 21 1 22; 15 87 2372 5 7 3 8 55 4 6; 17 171 14 1951 1 43 7 46 13 17; 15 170 2 0 2291 0 16 9 1 146; 17 97 8 16 7 2089 50 10 7 10; 93 76 4 0 2 13 2467 2 24 4; 4 85 9 1 0 0 1 2840 4 8; 18 60 25 22 0 9 104 7 1872 20; 8 183 0 9 175 6 2 60 1 1933]     [575, 146, 750, 1005, 683, 1012, 614, 360, 1155, 858]]
[10 7   [2350 10 2 0 3 0 28 4 1 3; 0 3066 10 0 0 0 2 13 1 14; 8 58 2170 4 3 2 1 25 1 3; 8 128 3 1638 1 21 1 23 5 5; 8 133 1 0 1981 0 9 5 0 76; 6 68 3 9 4 1763 23 7 1 6; 57 50 4 0 1 4 2209 0 11 0; 3 62 1 1 0 0 0 2693 2 4; 6 37 14 12 0 1 65 2 1526 9; 5 127 0 6 84 4 1 33 0 1559]        [865, 237, 1037, 1452, 1120, 1433, 963, 546, 1620, 1416]]
[10 8   [2104 3 0 0 1 0 15 2 0 0; 0 2971 6 0 0 0 2 8 0 7; 3 35 1877 1 0 0 0 15 0 2; 5 84 1 1326 1 5 0 10 3 3; 4 85 1 0 1609 0 4 2 0 35; 1 51 2 3 1 1373 12 1 0 1; 37 36 2 0 0 1 1886 0 4 0; 3 39 0 1 0 0 0 2490 1 2; 2 27 4 4 0 0 34 1 1180 6; 2 84 0 2 41 0 0 17 0 1144]       [1141, 349, 1379, 1847, 1593, 1878, 1333, 776, 2034, 1945]]
[10 9   [1788 2 0 0 0 0 6 0 0 0; 0 2847 2 0 0 0 1 6 0 2; 3 21 1518 0 0 0 0 4 0 0; 3 46 0 995 0 1 0 6 0 2; 1 52 0 0 1118 0 1 2 0 7; 0 27 1 1 1 943 6 1 0 0; 22 28 0 0 0 0 1464 0 0 0; 3 22 0 1 0 0 0 2216 1 0; 0 17 2 1 0 0 14 0 810 3; 2 42 0 1 19 0 0 12 0 745]        [1470, 485, 1766, 2232, 2152, 2343, 1785, 1069, 2445, 2414]]
[10 10  [1241 1 0 0 0 0 1 0 0 0; 0 2638 1 0 0 0 1 3 0 0; 2 11 1048 0 0 0 0 1 0 0; 1 16 0 597 0 0 0 1 0 0; 1 17 0 0 540 0 0 1 0 3; 0 14 0 0 0 493 0 0 0 0; 8 15 0 0 0 0 892 0 0 0; 1 8 0 0 0 0 0 1723 0 0; 0 8 1 0 0 0 3 0 447 1; 1 12 0 0 4 0 0 2 0 360]        [2023, 700, 2250, 2670, 2771, 2816, 2384, 1580, 2832, 2856]]
[11 1   [2858 46 25 22 25 13 148 38 31 60; 1 3210 26 0 8 0 18 37 1 42; 53 183 2719 41 32 13 32 146 63 30; 51 307 67 2400 18 111 27 146 76 82; 33 276 20 2 2575 2 44 45 10 326; 75 200 29 80 45 2561 179 39 53 62; 168 130 18 1 11 49 2818 10 81 13; 5 143 44 7 3 5 17 3034 22 32; 62 117 65 118 11 73 273 33 2450 90; 32 307 15 33 306 29 11 117 20 2365]       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
[11 2   [2855 49 25 22 27 11 154 33 30 60; 1 3207 25 0 7 0 19 39 2 43; 50 180 2727 38 31 17 34 144 63 28; 56 304 68 2399 18 113 24 141 72 90; 35 276 18 2 2566 2 48 48 9 329; 73 205 31 83 42 2561 176 39 55 58; 159 134 19 1 10 48 2818 10 84 16; 6 145 46 6 3 5 15 3033 22 31; 62 117 66 120 8 70 271 30 2448 100; 31 299 14 31 308 30 10 122 24 2366]        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
[11 3   [2845 50 25 23 22 15 151 38 32 62; 1 3205 25 0 9 0 17 40 2 44; 53 176 2723 35 31 13 35 148 64 29; 52 301 66 2403 13 117 25 146 71 86; 34 269 20 1 2584 2 47 44 9 319; 77 202 33 72 42 2552 174 39 57 61; 162 135 18 3 12 48 2822 9 75 12; 6 144 48 6 5 3 14 3032 21 33; 62 118 68 120 10 75 265 31 2442 95; 31 299 15 32 306 28 9 115 22 2373]      [3, 0, 5, 5, 4, 14, 3, 0, 6, 5]]
[11 4   [2843 41 16 17 16 8 131 32 31 50; 1 3203 24 0 7 0 18 36 1 46; 45 171 2691 30 24 9 24 135 55 27; 49 288 55 2364 7 98 17 128 71 67; 32 269 13 1 2554 2 40 38 5 316; 62 190 24 68 35 2518 165 27 40 53; 160 127 14 2 6 45 2792 7 70 11; 5 142 36 5 3 2 9 3019 16 28; 57 106 58 110 4 58 248 27 2420 82; 27 296 9 25 305 24 8 106 16 2330]      [81, 7, 101, 141, 63, 141, 65, 47, 122, 89]]
[11 5   [2744 36 11 11 14 4 115 25 19 36; 1 3188 22 0 4 0 14 31 1 39; 35 140 2601 16 19 5 14 104 38 15; 30 253 40 2248 3 84 12 89 43 48; 28 233 8 0 2503 1 27 30 3 289; 42 159 15 45 25 2412 124 19 25 28; 140 106 7 1 4 36 2718 6 65 9; 4 132 31 2 0 3 6 2963 11 19; 40 91 42 71 2 30 207 17 2266 48; 19 272 2 19 284 14 5 90 5 2259]      [251, 43, 325, 435, 211, 429, 207, 141, 478, 266]]
[11 6   [2624 26 5 3 8 0 83 14 9 22; 1 3146 17 0 3 0 11 23 1 31; 17 104 2442 7 8 3 9 80 15 9; 22 208 22 2045 1 53 9 58 18 21; 17 199 3 0 2370 0 21 12 1 229; 20 117 8 24 14 2196 77 10 12 13; 114 89 4 0 2 20 2557 3 33 5; 4 106 14 1 0 0 4 2879 7 11; 22 69 29 31 0 11 130 8 2011 29; 13 227 1 12 242 9 2 68 1 2086]       [472, 110, 618, 828, 481, 832, 472, 286, 952, 574]]
[11 7   [2452 20 2 0 6 0 44 6 4 11; 0 3095 12 0 0 0 4 19 1 19; 9 78 2257 4 3 2 4 42 1 5; 11 156 4 1774 1 30 3 32 6 13; 10 160 1 0 2126 0 15 7 0 112; 7 89 5 11 5 1912 36 10 2 6; 69 64 4 0 1 10 2342 1 19 2; 4 77 4 1 0 0 0 2756 3 4; 10 49 17 14 0 5 78 4 1703 14; 8 164 0 9 129 4 1 46 0 1744]        [721, 193, 907, 1255, 902, 1240, 787, 463, 1398, 1130]]
[11 8   [2251 9 0 0 3 0 27 3 1 1; 0 3021 8 0 0 0 2 10 0 11; 3 53 2022 1 1 0 1 21 1 2; 7 120 2 1500 1 14 0 18 4 5; 5 120 1 0 1827 0 7 3 0 56; 4 66 3 5 4 1579 16 5 0 4; 46 46 4 0 0 2 2076 0 9 0; 3 55 0 1 0 0 0 2599 1 3; 5 33 7 5 0 0 52 1 1371 8; 4 111 0 4 67 3 0 27 0 1365]     [971, 291, 1207, 1614, 1314, 1637, 1116, 650, 1810, 1654]]
[11 9   [1997 3 0 0 1 0 11 1 0 0; 0 2927 6 0 0 0 2 8 0 4; 3 30 1750 0 0 0 0 6 0 1; 4 76 1 1215 1 4 0 8 2 2; 4 82 1 0 1462 0 4 2 0 22; 1 44 2 3 1 1231 11 1 0 1; 33 35 0 0 0 0 1757 0 1 0; 3 34 0 1 0 0 0 2396 1 2; 2 24 2 3 0 0 26 0 1053 5; 2 70 0 1 30 0 0 15 0 997]      [1253, 396, 1522, 1972, 1756, 2028, 1473, 875, 2177, 2120]]
[11 10  [1667 2 0 0 0 0 3 0 0 0; 0 2812 2 0 0 0 1 5 0 1; 2 21 1421 0 0 0 0 3 0 0; 1 44 0 891 0 0 0 6 0 1; 1 49 0 0 971 0 1 2 0 6; 0 26 1 0 1 813 2 1 0 0; 16 25 0 0 0 0 1326 0 0 0; 1 22 0 1 0 0 0 2115 0 0; 0 16 2 1 0 0 11 0 712 1; 2 34 0 1 12 0 0 10 0 644]     [1594, 522, 1865, 2342, 2303, 2479, 1932, 1173, 2549, 2532]]
[11 11  [1150 1 0 0 0 0 1 0 0 0; 0 2587 1 0 0 0 1 2 0 0; 1 10 961 0 0 0 0 0 0 0; 1 14 0 525 0 0 0 1 0 0; 0 13 0 0 445 0 0 0 0 2; 0 12 0 0 0 417 0 0 0 0; 7 12 0 0 0 0 802 0 0 0; 0 8 0 0 0 0 0 1637 0 0; 0 6 1 0 0 0 2 0 393 1; 1 11 0 0 3 0 0 2 0 291]     [2114, 752, 2340, 2744, 2873, 2894, 2478, 1667, 2889, 2927]]
[12 1   [2846 51 23 23 27 16 154 40 30 56; 1 3204 27 0 7 0 18 39 2 45; 52 188 2713 37 35 16 34 146 63 28; 54 313 66 2392 18 114 23 141 76 88; 35 287 23 1 2545 2 47 49 11 333; 78 213 32 84 42 2542 173 39 56 64; 154 131 19 6 12 45 2825 9 84 14; 7 150 46 6 4 2 14 3031 20 32; 64 126 68 118 12 62 276 28 2435 103; 29 317 13 32 313 22 10 119 23 2357]       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
[12 2   [2844 53 24 23 22 14 155 38 34 59; 1 3203 26 0 7 0 17 41 2 46; 51 185 2728 38 34 12 34 144 60 26; 54 316 68 2397 15 109 27 141 72 86; 37 282 20 1 2546 3 49 45 12 338; 84 207 33 77 41 2545 178 39 55 64; 160 134 15 4 10 43 2817 10 90 16; 7 153 45 8 4 3 16 3024 21 31; 63 122 66 114 13 74 273 26 2447 94; 33 316 13 34 318 27 11 125 27 2331]       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
[12 3   [2843 52 23 24 29 11 150 41 33 59; 1 3211 26 0 6 0 17 38 2 42; 56 188 2705 36 34 13 41 148 62 27; 50 311 68 2397 17 110 26 141 72 91; 38 292 20 1 2543 3 48 43 9 336; 74 205 33 84 42 2540 182 36 57 62; 162 131 19 5 9 48 2820 9 78 17; 6 152 46 8 5 3 17 3024 22 29; 57 122 71 110 12 67 274 28 2451 99; 31 319 17 33 321 27 9 114 21 2341]       [1, 0, 2, 2, 0, 8, 1, 0, 1, 2]]
[12 4   [2829 47 20 20 21 10 145 34 31 57; 1 3203 26 0 7 0 16 39 2 43; 49 180 2693 32 30 12 31 137 56 26; 52 302 61 2377 8 105 17 134 65 78; 35 277 14 1 2547 2 44 38 8 328; 71 200 27 73 35 2525 166 31 47 56; 152 129 14 2 10 46 2803 9 76 12; 6 150 38 6 2 2 12 3021 19 26; 59 115 59 113 7 56 261 25 2425 92; 26 305 13 29 316 23 8 110 16 2329]        [52, 6, 66, 86, 39, 92, 46, 30, 80, 60]]
[12 5   [2773 40 11 11 15 4 127 28 22 42; 1 3198 22 0 5 0 13 34 1 39; 39 155 2621 22 20 7 19 116 46 19; 37 272 46 2287 3 89 14 102 52 59; 31 256 10 1 2509 1 36 32 5 309; 50 177 19 58 27 2435 140 22 30 38; 143 117 9 1 4 39 2750 6 70 10; 5 138 34 3 0 2 7 2975 13 21; 45 98 46 87 2 41 230 20 2313 68; 20 292 3 21 297 14 6 96 8 2283]       [193, 30, 248, 324, 143, 327, 150, 114, 342, 195]]
[12 6   [2676 32 6 6 8 1 96 18 11 26; 1 3165 18 0 3 0 11 28 1 39; 26 120 2500 11 11 3 10 91 22 11; 25 231 26 2122 1 65 12 70 29 28; 23 226 3 0 2415 0 25 15 3 257; 28 142 10 28 16 2283 100 14 18 22; 124 97 4 0 2 25 2641 4 43 7; 4 125 20 1 0 1 4 2917 9 13; 29 82 30 47 1 16 164 11 2103 38; 17 255 1 18 286 9 2 78 1 2153]      [386, 77, 507, 676, 366, 662, 352, 218, 771, 415]]
[12 7   [2527 23 2 1 6 0 60 9 6 18; 1 3115 15 0 1 0 8 20 1 24; 12 93 2332 5 4 3 5 57 5 7; 14 188 13 1878 1 39 5 41 13 18; 11 185 1 0 2234 0 17 10 0 163; 11 106 5 22 8 2024 48 10 6 7; 88 75 4 0 1 15 2444 1 24 4; 4 95 8 1 0 0 1 2800 4 5; 15 56 24 22 0 7 102 4 1837 20; 10 199 0 11 188 6 1 56 0 1894]       [614, 158, 789, 1075, 712, 1076, 643, 394, 1205, 870]]
[12 8   [2341 17 1 0 5 0 31 3 2 7; 0 3051 12 0 0 0 3 13 1 15; 4 69 2140 2 2 0 1 31 1 4; 8 143 2 1641 1 22 1 23 5 7; 7 150 1 0 1987 0 9 6 0 76; 5 73 4 7 5 1747 28 7 0 5; 55 55 4 0 0 8 2218 1 15 0; 3 72 2 1 0 0 0 2673 2 4; 8 42 13 9 0 0 64 2 1532 12; 7 141 0 8 96 4 0 38 0 1564]        [859, 248, 1058, 1432, 1097, 1442, 943, 555, 1610, 1377]]
[12 9   [2144 5 0 0 3 0 25 2 1 0; 0 2981 7 0 0 0 2 9 0 9; 3 48 1899 1 1 0 1 15 0 1; 4 110 2 1368 1 9 0 14 3 3; 5 112 1 0 1687 0 7 2 0 46; 2 62 3 4 3 1433 13 2 0 3; 41 44 3 0 0 0 1949 0 4 0; 3 51 0 1 0 0 0 2513 1 3; 5 31 6 3 0 0 41 1 1224 7; 3 102 0 4 48 2 0 24 0 1213]        [1086, 335, 1343, 1771, 1473, 1798, 1258, 740, 1974, 1839]]
[12 10  [1901 3 0 0 1 0 9 1 0 0; 0 2885 6 0 0 0 1 7 0 3; 3 28 1643 0 0 0 0 6 0 1; 3 68 0 1099 0 0 0 6 2 2; 4 71 1 0 1306 0 3 2 0 19; 1 41 1 2 1 1082 6 1 0 0; 28 34 0 0 0 0 1624 0 1 0; 3 30 0 1 0 0 0 2307 1 0; 2 21 2 1 0 0 19 0 915 4; 2 66 0 1 22 0 0 15 0 867]     [1351, 441, 1631, 2105, 1927, 2188, 1612, 970, 2328, 2262]]
[12 11  [1575 2 0 0 0 0 2 0 0 0; 0 2780 1 0 0 0 1 4 0 1; 2 19 1332 0 0 0 0 1 0 0; 1 37 0 791 0 0 0 4 0 1; 0 46 0 0 844 0 1 2 0 4; 0 23 1 0 1 707 1 1 0 0; 13 24 0 0 0 0 1227 0 0 0; 1 18 0 1 0 0 0 2022 0 0; 0 15 1 1 0 0 10 0 624 1; 2 32 0 1 9 0 0 8 0 549]       [1687, 556, 1958, 2451, 2436, 2589, 2035, 1270, 2640, 2634]]
[12 12  [1061 1 0 0 0 0 1 0 0 0; 0 2547 1 0 0 0 1 1 0 0; 1 8 876 0 0 0 0 0 0 0; 0 13 0 471 0 0 0 1 0 0; 0 12 0 0 388 0 0 0 0 1; 0 11 0 0 0 356 0 0 0 0; 7 10 0 0 0 0 710 0 0 0; 0 8 0 0 0 0 0 1544 0 0; 0 5 1 0 0 0 1 0 348 1; 1 11 0 0 1 0 0 2 0 249]      [2203, 793, 2427, 2800, 2932, 2956, 2572, 1760, 2936, 2971]]
[13 1   [2840 51 23 22 26 7 154 44 37 62; 1 3204 30 1 7 0 16 37 2 45; 55 185 2706 39 31 13 37 150 62 34; 50 318 73 2390 13 111 28 140 75 87; 41 301 22 1 2526 2 50 46 13 331; 84 218 30 75 43 2533 181 40 53 66; 169 140 18 5 11 46 2797 11 87 15; 6 157 41 6 5 4 14 3020 24 35; 55 129 69 119 10 65 269 27 2448 101; 31 323 13 35 323 29 13 124 21 2323]       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
[13 2   [2837 54 23 23 26 10 149 44 37 63; 1 3204 28 0 6 0 15 40 2 47; 51 188 2714 39 29 14 40 138 66 33; 54 312 70 2389 13 113 26 143 72 93; 41 302 17 1 2528 2 49 50 10 333; 87 219 31 80 41 2523 180 36 59 67; 168 140 19 4 12 46 2797 11 88 14; 8 159 39 8 5 3 14 3024 22 30; 57 127 64 117 11 58 272 26 2455 105; 33 323 13 31 317 32 11 120 26 2329]      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
[13 3   [2839 56 21 25 26 8 150 43 36 62; 1 3200 30 1 6 0 17 39 2 47; 52 192 2711 37 29 15 37 142 60 37; 55 316 69 2392 15 111 27 143 69 86; 43 298 21 1 2527 3 47 47 11 335; 82 212 32 80 43 2532 180 40 53 66; 166 142 18 3 12 47 2802 10 85 13; 6 161 41 5 6 4 20 3015 23 31; 55 130 68 115 11 70 273 26 2446 98; 32 326 13 36 317 28 11 120 24 2328]        [0, 0, 0, 2, 0, 3, 1, 0, 0, 0]]
[13 4   [2827 51 19 18 23 10 146 43 35 59; 1 3197 32 0 6 0 16 38 1 50; 49 183 2704 36 27 13 33 138 59 31; 53 306 60 2378 10 108 22 138 69 88; 40 302 18 1 2522 1 46 42 8 327; 76 213 28 76 40 2512 182 32 47 59; 164 137 19 3 11 49 2796 9 79 12; 7 154 38 5 4 5 12 3012 23 32; 57 119 62 110 8 58 280 27 2423 98; 31 320 10 33 314 23 10 120 20 2317]      [35, 2, 39, 53, 26, 58, 20, 20, 50, 37]]
[13 5   [2780 44 13 11 16 6 131 37 28 45; 1 3196 26 0 4 0 13 35 1 45; 42 162 2649 27 19 9 25 125 51 23; 38 288 47 2314 4 96 16 103 56 65; 32 271 13 1 2513 0 41 37 6 314; 64 192 19 63 27 2461 149 25 34 42; 153 122 11 1 6 43 2755 7 72 10; 5 143 33 3 3 3 9 2986 16 27; 48 102 53 88 5 42 245 19 2362 73; 24 303 4 27 304 17 7 105 13 2283]       [155, 22, 180, 258, 105, 247, 119, 84, 255, 148]]
[13 6   [2702 35 6 7 8 3 107 24 13 34; 1 3172 20 0 3 0 11 30 1 42; 29 137 2540 14 13 4 14 102 30 14; 25 252 34 2180 1 76 14 78 36 42; 27 252 4 0 2428 0 28 20 3 288; 39 160 11 31 21 2345 116 15 18 27; 136 102 6 0 4 29 2680 5 56 7; 5 131 25 1 0 3 4 2938 11 16; 32 90 41 59 1 26 198 12 2181 44; 21 274 1 22 289 10 3 85 4 2198]     [327, 63, 415, 547, 283, 540, 274, 178, 608, 328]]
[13 7   [2591 26 3 2 7 0 76 15 8 21; 1 3131 19 0 1 0 10 24 1 33; 19 107 2392 6 8 3 7 74 7 10; 20 210 19 1975 1 51 6 51 17 22; 17 211 1 0 2306 0 22 11 1 224; 16 127 7 23 14 2129 79 11 8 13; 109 90 4 0 2 16 2517 3 32 6; 4 110 12 1 0 0 1 2845 6 6; 22 69 27 32 0 12 127 7 1940 25; 12 232 0 14 251 7 2 68 0 2016]     [517, 123, 679, 913, 540, 896, 520, 327, 1031, 633]]
[13 8   [2427 21 1 0 6 0 46 8 4 12; 0 3075 15 0 1 0 3 17 1 21; 8 81 2216 2 3 2 5 41 3 5; 10 177 8 1739 1 30 4 31 8 10; 10 171 1 0 2102 0 11 8 0 111; 6 93 5 14 5 1878 36 9 2 7; 70 68 4 0 1 10 2327 1 17 2; 4 87 6 1 0 0 0 2720 2 5; 8 52 18 16 0 6 79 2 1689 16; 8 182 0 11 137 4 0 46 0 1720]     [741, 210, 946, 1267, 919, 1268, 799, 487, 1406, 1127]]
[13 9   [2235 14 0 0 5 0 26 3 1 3; 0 3021 9 0 0 0 3 10 0 11; 4 62 2018 2 2 0 1 21 1 3; 4 134 2 1518 1 14 0 18 3 6; 5 138 1 0 1847 0 8 4 0 63; 3 68 4 4 4 1588 19 5 0 4; 50 53 3 0 0 5 2085 1 9 0; 3 67 1 1 0 0 0 2585 1 3; 5 35 10 7 0 0 52 1 1399 8; 6 128 0 6 76 3 0 30 0 1401]       [979, 289, 1198, 1585, 1267, 1624, 1093, 651, 1775, 1585]]
[13 10  [2061 5 0 0 2 0 18 2 1 0; 0 2943 7 0 0 0 1 8 0 7; 3 45 1800 1 1 0 0 13 0 1; 3 105 1 1247 0 2 0 9 3 3; 4 104 1 0 1536 0 3 2 0 36; 1 53 3 3 2 1292 8 2 0 2; 37 43 2 0 0 0 1821 0 3 0; 3 45 0 1 0 0 0 2431 1 1; 3 29 6 2 0 0 31 0 1090 5; 2 93 0 2 34 2 0 20 0 1080]       [1177, 377, 1448, 1912, 1647, 1957, 1393, 830, 2126, 2002]]
[13 11  [1801 2 0 0 0 0 5 0 0 0; 0 2860 5 0 0 0 1 7 0 3; 3 26 1544 0 0 0 0 4 0 1; 1 64 0 988 0 0 0 6 1 1; 3 69 1 0 1177 0 1 2 0 14; 1 38 1 2 1 957 4 1 0 0; 21 31 0 0 0 0 1488 0 1 0; 3 28 0 1 0 0 0 2223 0 0; 1 19 2 1 0 0 16 0 814 3; 2 62 0 1 17 0 0 14 0 756]       [1458, 467, 1734, 2224, 2066, 2318, 1758, 1057, 2436, 2383]]
[13 12  [1479 2 0 0 0 0 2 0 0 0; 0 2737 1 0 0 0 1 2 0 1; 2 15 1226 0 0 0 0 0 0 0; 1 35 0 727 0 0 0 2 0 1; 0 43 0 0 732 0 0 2 0 1; 0 19 0 0 0 606 0 0 0 0; 13 21 0 0 0 0 1117 0 0 0; 0 14 0 0 0 0 0 1938 0 0; 0 13 1 1 0 0 7 0 560 1; 2 30 0 1 8 0 0 6 0 467]        [1783, 601, 2069, 2519, 2555, 2698, 2148, 1360, 2709, 2721]]
[13 13  [983 0 0 0 0 0 1 0 0 0; 0 2503 1 0 0 0 1 1 0 0; 1 7 798 0 0 0 0 0 0 0; 0 13 0 416 0 0 0 1 0 0; 0 9 0 0 317 0 0 0 0 1; 0 10 0 0 0 280 0 0 0 0; 6 6 0 0 0 0 628 0 0 0; 0 7 0 0 0 0 0 1478 0 0; 0 4 1 0 0 0 0 0 296 1; 0 8 0 0 1 0 0 2 0 217]      [2282, 837, 2506, 2855, 3006, 3033, 2659, 1827, 2990, 3007]]]